// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password_hash)
VALUES ($1, $2)
RETURNING id, username, password_hash, created_at, updated_at
`

type CreateUserParams struct {
	Username     string `json:"username"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password_hash, created_at, updated_at FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserMatches = `-- name: GetUserMatches :many
SELECT
	m.id,
	px.username as player_x_username,
	py.username as player_y_username,
	w.username as winner_username,
	CASE
		WHEN m.winner_id = $1 THEN true
		ELSE false
	END as won,
	m.played_at
FROM matches m
JOIN users px ON m.player_x_id = px.id
JOIN users py ON m.player_y_id = py.id
JOIN users w ON m.winner_id = w.id
WHERE m.player_x_id = $1 OR m.player_y_id = $1
ORDER BY m.played_at DESC
LIMIT 10
`

type GetUserMatchesRow struct {
	ID              uuid.UUID `json:"id"`
	PlayerXUsername string    `json:"player_x_username"`
	PlayerYUsername string    `json:"player_y_username"`
	WinnerUsername  string    `json:"winner_username"`
	Won             bool      `json:"won"`
	PlayedAt        time.Time `json:"played_at"`
}

func (q *Queries) GetUserMatches(ctx context.Context, winnerID uuid.UUID) ([]GetUserMatchesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserMatches, winnerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserMatchesRow
	for rows.Next() {
		var i GetUserMatchesRow
		if err := rows.Scan(
			&i.ID,
			&i.PlayerXUsername,
			&i.PlayerYUsername,
			&i.WinnerUsername,
			&i.Won,
			&i.PlayedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserStats = `-- name: GetUserStats :one
SELECT
	COUNT(*) as total_matches,
	COUNT(CASE WHEN winner_id = $1 THEN 1 END) as wins,
	COUNT(CASE WHEN (player_x_id = $1 OR player_y_id = $1) AND winner_id != $1 THEN 1 END) as losses
FROM matches
WHERE player_x_id = $1 OR player_y_id = $1
`

type GetUserStatsRow struct {
	TotalMatches int64 `json:"total_matches"`
	Wins         int64 `json:"wins"`
	Losses       int64 `json:"losses"`
}

func (q *Queries) GetUserStats(ctx context.Context, winnerID uuid.UUID) (GetUserStatsRow, error) {
	row := q.db.QueryRowContext(ctx, getUserStats, winnerID)
	var i GetUserStatsRow
	err := row.Scan(&i.TotalMatches, &i.Wins, &i.Losses)
	return i, err
}
